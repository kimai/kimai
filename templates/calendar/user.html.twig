{% extends 'base.html.twig' %}
{% import "macros/widgets.html.twig" as widgets %}

{% block main %}
    <div class="row">
        {% set hasTwoColumns = (config.dragDropAmount > 0 and dragAndDrop is not empty and (dragAndDrop|filter(s => s.entries|length > 0)|length > 0)) or form is not null or icsCalendars is not empty %}
        {% if hasTwoColumns %}
        <div class="col-md-4 col-lg-3 d-none d-md-block order-last">
            {% if form is not null %}
                {% embed '@theme/embeds/card.html.twig' %}
                    {% block box_body %}
                        {{ form_start(form) }}
                        {% if form.user is defined %}
                            {{ form_row(form.user) }}
                        {% endif %}
                        {{ form_rest(form) }}
                        {{ form_end(form) }}
                    {% endblock %}
                {% endembed %}
            {% endif %}
            {% for source in dragAndDrop|filter(s => s.entries|length > 0) %}
                {% embed '@theme/embeds/card.html.twig' %}
                    {% block box_title %}{{ source.title|trans({}, source.translationDomain) }}{% endblock %}
                    {% block box_body_class %}drag-and-drop-source p-0{% endblock %}
                    {% block box_body %}
                        <div class="list-group list-group-flush external-events" data-method="{{ source.method }}" data-route="{{ path(source.route, source.routeParams) }}" data-route-replacer="{{ source.routeReplacer|json_encode|e('html_attr') }}">
                            {% for entry in source.entries|slice(0, config.dragDropAmount) %}
                                <div class="p-1 ps-2 list-group-item external-event draggable" data-entry="{{ entry.data|json_encode|e('html_attr') }}"{% if entry.project is not null %} data-toggle="tooltip" title="{{ entry.project.customer.name }}"{% endif %}>
                                    <div class="row align-items-center">
                                        <div class="col text-truncate">
                                            {% if source.blockInclude is not null and entry.blockName is not null and block(entry.blockName, source.blockInclude) is defined %}
                                                {{ block(entry.blockName, source.blockInclude) }}
                                            {% else %}
                                                <span class="d-block text-body-secondary text-truncate mt-n1">{{ entry.title }}</span>
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endblock %}
                {% endembed %}
            {% endfor %}
            
            {# ICS Calendar Management #}
            {% if icsCalendars is not empty %}
                {% embed '@theme/embeds/card.html.twig' %}
                    {% block box_title %}
                        <div class="d-flex justify-content-between align-items-center">
                            <span>{{ 'calendar.ics.external_calendars'|trans }}</span>
                            <div class="card-actions">
                                <button class="btn btn-sm btn-outline-secondary" onclick="refreshAllICSCalendars()" title="{{ 'calendar.ics.refresh_all'|trans }}">
                                    <i class="fas fa-sync"></i>
                                </button>
                            </div>
                        </div>
                    {% endblock %}
                    {% block box_body_class %}p-0{% endblock %}
                    {% block box_body %}
                        <div class="list-group list-group-flush">
                            {% for icsCalendar in icsCalendars %}
                                <div class="list-group-item d-flex justify-content-between align-items-center" id="ics-calendar-{{ icsCalendar.id }}">
                                                                       <div class="d-flex align-items-center flex-grow-1">
                                       <div class="form-check me-2" style="display: none;">
                                           <input
                                               class="form-check-input ics-calendar-toggle"
                                               type="checkbox"
                                               id="ics-toggle-{{ icsCalendar.id }}"
                                               data-ics-id="{{ icsCalendar.id }}"
                                               {{ icsCalendar.enabled ? 'checked' : '' }}
                                           >
                                       </div>
                                        <div class="flex-grow-1 min-width-0">
                                            <div class="d-flex align-items-center">
                                                {% if icsCalendar.color %}
                                                    <span class="badge me-2" style="background-color: {{ icsCalendar.color }}; color: {{ icsCalendar.color|font_contrast }};">&nbsp;</span>
                                                {% endif %}
                                                <span class="text-truncate fw-medium">{{ icsCalendar.name }}</span>
                                            </div>
                                            {% if icsCalendar.lastSync %}
                                                <small class="text-muted">{{ 'calendar.ics.last_sync'|trans }}: {{ icsCalendar.lastSync|date_short }}</small>
                                            {% else %}
                                                <small class="text-warning">{{ 'calendar.ics.never_synced'|trans }}</small>
                                            {% endif %}
                                        </div>
                                    </div>
                                    <div class="btn-group btn-group-sm ms-2">
                                        <button class="btn btn-outline-secondary" onclick="refreshICSCalendar({{ icsCalendar.id }})" title="{{ 'calendar.ics.refresh'|trans }}">
                                            <i class="fas fa-sync"></i>
                                        </button>
                                        <a href="{{ path('calendar_ics_edit', {id: icsCalendar.id}) }}" class="btn btn-outline-secondary" title="{{ 'action.edit'|trans }}">
                                            <i class="far fa-edit"></i>
                                        </a>
                                        <a href="{{ path('calendar_ics_delete', {id: icsCalendar.id}) }}" class="btn btn-outline-danger" title="{{ 'action.delete'|trans }}">
                                            <i class="far fa-trash-alt"></i>
                                        </a>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endblock %}
                {% endembed %}
            {% endif %}
        </div>
        {% endif %}

        <div class="col-xs-12 {% if hasTwoColumns %}col-md-8 col-lg-9 col-print-12{% endif %}">
            {% embed '@theme/embeds/card.html.twig' %}
                {% block box_title %}
                    <div class="card-actions">
                        <a href="{{ path('calendar_ics_create') }}" class="btn btn-primary btn-sm" title="{{ 'calendar.ics.add'|trans }}">
                            {{ 'calendar.ics.add'|trans }}
                        </a>
                    </div>
                {% endblock %}
                {% block box_body_class %}p-0{% endblock %}
                {% block box_body %}
                    <div id="timesheet_calendar"></div>
                {% endblock %}
            {% endembed %}
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('calendar') }}
{% endblock %}

{% block head %}
    {{ parent() }}
    {{ encore_entry_script_tags('calendar') }}
{% endblock %}

{% block javascripts %}
    {% set calendarSelector = 'timesheet_calendar' %}
    {% set createParams = '' %}
    {% set createRoute = 'timesheet_create' %}
    {% set editRoute = 'timesheet_edit' %}
    {% set canCreate = is_granted('create_own_timesheet') %}
    {% set canEdit = is_granted('edit_own_timesheet') %}
    {% set canEditExported = is_granted('edit_exported_timesheet') %}
    {% set isForeignEdit = false %}
    {% if user != app.user %}
        {% set isForeignEdit = true %}
        {% set createParams = 'user=' ~ user.id ~ '&' %}
        {% set createRoute = 'admin_timesheet_create' %}
        {% set editRoute = 'admin_timesheet_edit' %}
        {% set canCreate = is_granted('create_other_timesheet') %}
        {% set canEdit = is_granted('edit_other_timesheet') %}
    {% endif %}

    {{ parent() }}
    <script>
        {# using var, so it can be re-used in the different scopes #}
        var calendar = null;

        const reloader = function() { calendar.reloadEvents(); };
        document.addEventListener('kimai.timesheetUpdate', reloader);
        document.addEventListener('kimai.timesheetDelete', reloader);

        document.addEventListener('kimai.initialized', function(event) {
            const kimai = event.detail.kimai;

            let calendarOptions = {
                dragdrop: {
                    container: '.external-events',
                    items: '.external-event',
                },
                initialView: '{{ app.user.getPreferenceValue('calendar_initial_view') }}',
                translations: {
                    customer: '{{ 'customer'|trans }}',
                    project: '{{ 'project'|trans }}',
                    activity: '{{ 'activity'|trans }}',
                },
                permissions: {
                    edit: {% if canEdit %}true{% else %}false{% endif %},
                    edit_exported: {% if canEditExported %}true{% else %}false{% endif %},
                    create: {% if canCreate %}true{% else %}false{% endif %},
                    edit_begin: {% if can_edit_begin %}true{% else %}false{% endif %},
                    edit_end: {% if can_edit_end %}true{% else %}false{% endif %},
                    edit_duration: {% if can_edit_duration %}true{% else %}false{% endif %},
                    punch: {% if is_punch_mode %}true{% else %}false{% endif %},
                },
                icons: {
                    next: '{{ 'right'|icon(true) }}',
                    previous: '{{ 'left'|icon(true) }}',
                    nextYear: '{{ 'right2'|icon(true) }}',
                    previousYear: '{{ 'left2'|icon(true) }}',
                },
                {% if google is not null %}
                googleCalendarApiKey: '{{ google.apiKey }}',
                {% endif %}
                patterns: {
                    title: '{{ config.entryTitlePattern }}',
                },
                defaultStartTime: {% if defaultStartTime is null %}null{% else %}'{{ defaultStartTime }}'{% endif %},
                now: '{{ now|date_format('c') }}',
                {# see https://github.com/kimai/kimai/issues/2155 #}
                timezone: '{{ app.user.timezone == 'UTC' ? 'GMT' : app.user.timezone }}',
                eventSources: [
                    {
                        id: 'kimaiUserTimeSource',
                        type: 'timesheet',
                        url: '{{ path('get_timesheets', {'user': user.id, 'size': 1000, 'full': 'true', 'begin': '__FROM__', 'end': '__TO__'})|raw }}',
                        options: {
                            color: '{{ config('theme.calendar.background_color') }}',
                        },
                    }
                    {% if google is not null %}
                    {% for source in google.sources %}
                    ,
                    {
                        id: 'googleCompanyCalendar{{ loop.index }}',
                        type: '{{ source.typeName }}',
                        options: {
                            googleCalendarId: '{{ source.uri }}',
                            name: '{{ source.id }}',
                            color: '{{ source.color }}',
                            textColor: '{{ source.color|font_contrast }}',
                        }
                    }
                    {% endfor %}
                    {% endif %}
                    {% for source in sources %}
                    ,
                    {
                        id: '{{ source.id }}{{ loop.index }}',
                        type: '{{ source.typeName }}',
                        url: '{{ source.uri|raw }}',
                        options: {...{{ source.options|json_encode|raw }}, ...{
                            color: '{{ source.color }}',
                            textColor: '{{ source.color|font_contrast }}',
                        }}
                    }
                    {% endfor %}
                ],
                url: {
                    update: (timesheetId) => {
                        return '{{ path('patch_timesheet', {id: 1}) }}'.replace('1', timesheetId);
                    },
                    create: (start, end) => {
                        let createUrl = '{{ path(createRoute) }}' + '?{{ createParams|raw }}';
                        if (end !== undefined) {
                            createUrl += 'from=' + start + '&to=' + end;
                        } else {
                            createUrl += 'begin=' + start;
                        }
                        return createUrl;
                    },
                    edit: (timesheetId) => {
                        return '{{ path(editRoute, {id: '-XX-'}) }}'.replace('-XX-', timesheetId);
                    },
                    actions: (timesheetId) => {
                        return '{{ path('get_timesheet_actions', {id: 1, 'view': 'calendar', 'locale': (app.request.locale)}) }}'.replace('1', timesheetId);
                    },
                },
                preparePayloadForUpdate: (data) => {
                    {% if isForeignEdit %}
                    data.user = {{ user.id }};
                    {% endif %}

                    return data;
                },
            };

            calendar = new KimaiCalendar(
                kimai,
                document.getElementById('{{ calendarSelector }}'),
                Object.assign({}, calendarOptions, {{ config|json_encode|raw }})
            );
            calendar.render();

            document.querySelector('.fc-today-button').classList.remove('btn-icon');
            document.querySelector('.fc-header-toolbar').classList.toggle('row');
            document.querySelector('.fc-header-toolbar').classList.add('p-3');
            const toolbar = document.querySelectorAll('.fc-header-toolbar .fc-toolbar-chunk');
            toolbar[0].parentElement.classList.add('p-3');
            toolbar[0].classList.add('col-md-4', 'col-6', 'mb-1', 'text-start', 'order-xs-1');
            toolbar[1].classList.add('col-md-4', 'col-12', 'mb-1', 'text-center', 'order-3');
            toolbar[2].classList.add('col-md-4', 'col-6', 'mb-1', 'text-end', 'order-md-4', 'order-xs-2');

            KimaiReloadPageWidget.create('kimai.systemConfigUpdate', true);

            // Store calendar instance globally for ICS functions
            console.log('Storing calendar instance:', calendar);
            console.log('Calendar methods:', Object.getOwnPropertyNames(calendar));
            console.log('Has getEventSources:', typeof calendar.getEventSources);
            window.kimaiCalendar = calendar;

            // ICS Calendar Management Functions - make them globally accessible
            window.refreshICSCalendar = function(icsId) {
                if (!window.kimaiCalendar) {
                    console.error('Calendar not initialized');
                    return;
                }
                
                // Use KimaiCalendar's reloadEvents method for specific ICS source
                const fullCalendar = window.kimaiCalendar.getCalendar();
                let sourceFound = false;
                
                fullCalendar.getEventSources().forEach(source => {
                    if (source.id === 'ical-ics_' + icsId) {
                        sourceFound = true;
                        // Remove all events from this source first
                        fullCalendar.getEvents().forEach(event => {
                            if (event.source && event.source.id === 'ical-ics_' + icsId) {
                                event.remove();
                            }
                        });
                        // Then refetch fresh data
                        source.refetch();
                    }
                });
                
                if (!sourceFound) {
                    // If source not found, reload all events
                    window.kimaiCalendar.reloadEvents();
                }
                
                // Update the last sync time display
                const now = new Date().toLocaleString();
                const syncElement = document.querySelector(`#ics-calendar-${icsId} small`);
                if (syncElement) {
                    syncElement.textContent = `{{ 'calendar.ics.last_sync'|trans }}: ${now}`;
                    syncElement.className = 'text-muted';
                }
                
                kimai.getPlugin('alert').success('{{ 'calendar.ics.refresh_success'|trans }}');
            };

            window.refreshAllICSCalendars = function() {
                const icsCalendars = document.querySelectorAll('.ics-calendar-toggle');
                icsCalendars.forEach(toggle => {
                    if (toggle.checked) {
                        const icsId = toggle.getAttribute('data-ics-id');
                        window.refreshICSCalendar(icsId);
                    }
                });
            };
        
        }); // End of kimai.initialized event listener

        // Global toggle function that can access the stored calendar instance
        window.toggleICSCalendar = function(icsId, enabled) {
            console.log('Toggle called with:', icsId, enabled);
            console.log('kimaiCalendar exists:', !!window.kimaiCalendar);
            console.log('kimaiCalendar type:', typeof window.kimaiCalendar);
            console.log('getEventSources method:', typeof (window.kimaiCalendar && window.kimaiCalendar.getEventSources));
            
            if (!window.kimaiCalendar) {
                console.error('Calendar not initialized');
                kimai.getPlugin('alert').error('{{ 'calendar.ics.toggle_error'|trans }} - Calendar not ready');
                return;
            }
            
            if (typeof window.kimaiCalendar.getCalendar !== 'function') {
                console.error('Calendar getCalendar method not available');
                kimai.getPlugin('alert').error('{{ 'calendar.ics.toggle_error'|trans }} - Calendar methods not available');
                return;
            }

            fetch(`{{ path('calendar_ics_toggle', {id: '__ID__'}) }}`.replace('__ID__', icsId), {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    enabled: enabled
                })
            })
            .then(response => {
                console.log('Toggle response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Toggle response data:', data);
                if (data.success) {
                    // Get the FullCalendar instance
                    const fullCalendar = window.kimaiCalendar.getCalendar();
                    
                    const sourceId = 'ical-ics_' + icsId;
                    
                    if (enabled) {
                        // When enabling, check if source exists, if not add it
                        let sourceExists = false;
                        fullCalendar.getEventSources().forEach(source => {
                            if (source.id === sourceId) {
                                sourceExists = true;
                                source.refetch();
                            }
                        });
                        
                        if (!sourceExists) {
                            // Add the event source with proper ICS format and styling
                            const sourceUrl = `{{ path('api_calendar_ics_events', {id: '__ID__'}) }}`.replace('__ID__', icsId);
                            fullCalendar.addEventSource({
                                id: sourceId,
                                url: sourceUrl,
                                format: 'ics',
                                // Add styling to match how ICS sources are initially created
                                borderColor: '#ff6b6b',
                                textColor: 'white',
                                display: 'block',
                                className: 'external-calendar-event'
                            });
                        }
                    } else {
                        // When disabling, remove the event source entirely
                        fullCalendar.getEventSources().forEach(source => {
                            if (source.id === sourceId) {
                                source.remove();
                            }
                        });
                    }
                    
                    const message = enabled ? '{{ 'calendar.ics.enabled'|trans }}' : '{{ 'calendar.ics.disabled'|trans }}';
                    kimai.getPlugin('alert').success(message);
                } else {
                    throw new Error(data.error || 'Toggle failed');
                }
            })
            .catch(error => {
                console.error('Error toggling ICS calendar:', error);
                kimai.getPlugin('alert').error('{{ 'calendar.ics.toggle_error'|trans }} - ' + error.message);
                
                // Revert the checkbox
                const checkbox = document.querySelector(`#ics-toggle-${icsId}`);
                if (checkbox) {
                    checkbox.checked = !enabled;
                }
            });
        };

        // Single global event listener for toggle checkboxes
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('ics-calendar-toggle')) {
                const icsId = e.target.getAttribute('data-ics-id');
                const enabled = e.target.checked;
                window.toggleICSCalendar(icsId, enabled);
            }
        });
    </script>
{% endblock %}